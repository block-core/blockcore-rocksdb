name: Build

on:
  push:
    branches:
      - main

  workflow_dispatch:

jobs:

  buildAndRelease:

    strategy:
      matrix:
        os: [ ubuntu-latest ]
      fail-fast: false

    runs-on: ${{ matrix.os }}

    env:
      PROJECT_PATH: './csharp/RocksDbSharp.csproj'
      BUILD_CONFIGURATION: 'Release'

    steps:

    - uses: actions/checkout@v2
      name: Checkout

    # IMPORTANT: Never do ".0" revision, the .NET packing will simply drop it.
    - name: Variables
      run: |
        ROCKSDBVNUM=`cat rocksdbversion`
        echo "ROCKSDBVERSION=$(cat rocksdbversion).$(cat revision)" >> $GITHUB_ENV
        echo "ROCKSDBVERSIONBASE=$(cat rocksdbversion)" >> $GITHUB_ENV
        echo "ROCKSDBNATIVE=$(cat rocksdbversion).7" >> $GITHUB_ENV
      shell: bash

    - name: List variable
      run: |
        echo $ROCKSDBVERSION
        echo $ROCKSDBVERSIONBASE
        echo $ROCKSDBNATIVE
      shell: bash

    - name: Download asset from release
      uses: Xotl/cool-github-releases@v1
      with:
        mode: download
        repository: block-core/blockcore-rocksdb-native
        tag_name: ${{env.ROCKSDBNATIVE}}
        assets: librocksdb.dll;librocksdb.dylib;librocksdb.so;libzstd.1.dylib;libsnappy.1.dylib;liblz4.1.dylib
        github_token: ${{ github.token }}

    - name: Copy Native Libraries
      run: |
        cp "./librocksdb.dll" "${{ github.workspace }}/csharp/runtimes/win-x64/native/librocksdb.dll"
        cp "./librocksdb.so" "${{ github.workspace }}/csharp/runtimes/linux-x64/native/librocksdb.so"
        cp "./librocksdb.dylib" "${{ github.workspace }}/csharp/runtimes/osx-x64/native/librocksdb.dylib"
        cp "./libzstd.1.dylib" "${{ github.workspace }}/csharp/runtimes/osx-x64/native/libzstd.1.dylib"
        cp "./libsnappy.1.dylib" "${{ github.workspace }}/csharp/runtimes/osx-x64/native/libsnappy.1.dylib"
        cp "./liblz4.1.dylib" "${{ github.workspace }}/csharp/runtimes/osx-x64/native/liblz4.1.dylib"
      shell: bash

    - name: Run CodeGen
      run: dotnet run ${{ github.workspace }}/build-codegen/CSharpGen.csproj
      working-directory: "${{ github.workspace }}/build-codegen/"

    - name: Nuget Pack
      run: dotnet build -p:Version=${{env.ROCKSDBVERSION}} -p:AllowUnsafeBlocks=True -p:LangVersion=latest --configuration ${{env.BUILD_CONFIGURATION}} ${{env.PROJECT_PATH}}

    - name: Nuget Pack
      run: dotnet pack --no-build -p:Version=${{env.ROCKSDBVERSION}} -p:AllowUnsafeBlocks=True -p:LangVersion=latest --configuration ${{env.BUILD_CONFIGURATION}} --output "${{github.workspace}}/package/" ${{env.PROJECT_PATH}}

    - uses: actions/upload-artifact@v2
      with:
        name: Blockcore-RocksDB-NuGet-${{env.ROCKSDBVERSION}}-preview
        path: "${{github.workspace}}/package/"

    - name: Release
      uses: sondreb/action-release@main
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        #files: "${{github.workspace}}/package/Blockcore.RocksDB.${{env.ROCKSDBVERSION}}.nupkg"
        folder: "${{github.workspace}}/package/"
        draft: true
        prerelease: false
        body: ''
        name: "Blockcore RocksDB Nuget (Release ${{env.ROCKSDBVERSION}})"
        tag: ${{env.ROCKSDBVERSION}}
